package com.orobator.android.gramophone.model.loaders;import android.content.Context;import android.database.Cursor;import android.os.Bundle;import com.orobator.android.gramophone.model.Album;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongDatabaseHelper;import com.orobator.android.gramophone.view.fragments.GenresFragment;/** * Loads a SongCursor asynchronously. */public class SongCursorLoader extends SQLiteCursorLoader {    public static final int ALL_SONGS_ID = 0;    public static final int ALBUM_SONGS_ID = 1;    public static final int ARTIST_SONGS_ID = 2;    public static final int GENRE_SONGS_ID = 3;    private int mID;    private Bundle mArgs;    private SongDatabaseHelper mHelper;    public SongCursorLoader(Context context, int ID, Bundle args) {        super(context);        mID = ID;        mArgs = args;        mHelper = new SongDatabaseHelper(context);    }    @Override    protected Cursor loadCursor() {        switch (mID) {            case ALL_SONGS_ID:                return mHelper.querySongs();            case ARTIST_SONGS_ID:                String artist = mArgs.getString(Song.KEY_ARTIST);                return mHelper.querySongsForArtist(artist);            case ALBUM_SONGS_ID:                String albumName = mArgs.getString(Album.KEY_ALBUM_NAME);                String albumArtist = mArgs.getString(Album.KEY_ALBUM_ARTIST);                Album album = new Album(albumName, albumArtist);                return mHelper.querySongsForAlbum(album);            case GENRE_SONGS_ID:                String genre = mArgs.getString(GenresFragment.KEY_FOR_GENRE);                return mHelper.querySongsForGenre(genre);            default:                return mHelper.querySongs();        }    }}