package com.orobator.android.gramophone.view.fragments;import android.content.SharedPreferences;import android.os.Bundle;import android.preference.Preference;import android.preference.PreferenceFragment;import android.preference.PreferenceManager;import android.widget.Toast;import com.orobator.android.gramophone.R;public class SettingsFragment extends PreferenceFragment {    private static final String TAG = "PreferenceFragment";    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // Load the preferences from an XML resource        addPreferencesFromResource(R.xml.preferences);        PreferenceManager pm = getPreferenceManager();        SharedPreferences sharedPreferences = pm.getSharedPreferences();        Preference defaultScreenPreference = pm.findPreference("pref_key_default_view");        String defaultScreenSummary = sharedPreferences.getString("pref_key_default_view", getResources().getStringArray(R.array.default_start_screens)[0]);        final String[] screens = getResources().getStringArray(R.array.default_start_screens);        switch (defaultScreenSummary) {            case "songs":                defaultScreenSummary = screens[0];                break;            case "albums":                defaultScreenSummary = screens[1];                break;            case "artists":                defaultScreenSummary = screens[2];                break;            case "genres":                defaultScreenSummary = screens[3];                break;            case "playlists":                defaultScreenSummary = screens[4];                break;            default:                break;        }        defaultScreenPreference.setSummary(defaultScreenSummary);        defaultScreenPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {            @Override            public boolean onPreferenceChange(Preference preference, Object newValue) {                String screenCode = (String) newValue;                switch (screenCode) {                    case "songs":                        preference.setSummary(screens[0]);                        break;                    case "albums":                        preference.setSummary(screens[1]);                        break;                    case "artists":                        preference.setSummary(screens[2]);                        break;                    case "genres":                        preference.setSummary(screens[3]);                        break;                    case "playlists":                        preference.setSummary(screens[4]);                        break;                    default:                        break;                }                return true;            }        });        Preference pauseOnUnplugPreference = pm.findPreference("pref_key_pause_music_when_unplugging_headphones");        boolean pauseOnUnplug = sharedPreferences.getBoolean("pref_key_pause_music_when_unplugging_headphones", true);        String pauseOnUnplugSummary;        if (pauseOnUnplug) {            pauseOnUnplugSummary = getString(R.string.preference_summary_playback_pause_on_unplug);        } else {            pauseOnUnplugSummary = getString(R.string.preference_summary_playback_dont_pause_on_unplug);        }        pauseOnUnplugPreference.setSummary(pauseOnUnplugSummary);        pauseOnUnplugPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {            @Override            public boolean onPreferenceChange(Preference preference, Object newValue) {                Boolean b = (Boolean) newValue;                boolean pause = b.booleanValue();                if (pause) {                    preference.setSummary(getString(R.string.preference_summary_playback_pause_on_unplug));                } else {                    preference.setSummary(getString(R.string.preference_summary_playback_dont_pause_on_unplug));                }                return true;            }        });        Preference buildVersionPreference = pm.findPreference("pref_key_build_version");        String buildNumber = getActivity().getResources().getString(R.string.build_number);        String buildVersion = getActivity().getResources().getString(R.string.version_of_app, buildNumber);        buildVersionPreference.setSummary(buildVersion);        buildVersionPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                Toast.makeText(getActivity(), "Don't click me.", Toast.LENGTH_SHORT).show();                return true;            }        });    }}