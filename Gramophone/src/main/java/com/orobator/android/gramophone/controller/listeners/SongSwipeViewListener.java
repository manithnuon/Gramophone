package com.orobator.android.gramophone.controller.listeners;import android.app.Fragment;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.widget.ListAdapter;import com.fortysevendeg.android.swipelistview.BaseSwipeListViewListener;import com.orobator.android.gramophone.controller.services.MusicPlayerService;import com.orobator.android.gramophone.model.Album;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongQueue;import com.orobator.android.gramophone.view.activities.NowPlayingActivity;import java.io.File;public class SongSwipeViewListener extends BaseSwipeListViewListener {    private static final String TAG = "SongSwipeViewListener";    private ListAdapter mListAdapter;    private Fragment mFragment;    private String mCollectionType;    public SongSwipeViewListener(ListAdapter listAdapter, Fragment fragment, String collectionType) {        mListAdapter = listAdapter;        mFragment = fragment;        mCollectionType = collectionType;    }    @Override    public void onOpened(int position, boolean toRight) {    }    @Override    public void onClosed(int position, boolean fromRight) {    }    @Override    public void onListChanged() {    }    @Override    public void onMove(int position, float x) {    }    @Override    public void onStartOpen(int position, int action, boolean right) {    }    @Override    public void onStartClose(int position, boolean right) {    }    @Override    public void onClickFrontView(int position) {        Song song = (Song) mListAdapter.getItem(position);        Bundle collectionInfo;        switch (mCollectionType) {            case Song.KEY_COLLECTION_TYPE_ALL:                collectionInfo = null;                break;            case Song.KEY_COLLECTION_TYPE_ALBUM:                Album album = new Album(song.getAlbum(), song.getAlbumArtist());                collectionInfo = new Bundle();                collectionInfo.putSerializable(Song.KEY_ALBUM, album);                break;            case Song.KEY_COLLECTION_TYPE_ARTIST:                collectionInfo = new Bundle();                collectionInfo.putString(Song.KEY_ARTIST, song.getArtist());                break;            case Song.KEY_COLLECTION_TYPE_GENRE:                collectionInfo = new Bundle();                collectionInfo.putString(Song.KEY_GENRE, song.getGenre());                break;            default:                collectionInfo = null;                break;        }        SongQueue.initializeQueue(song, false, mCollectionType, mFragment.getActivity().getApplicationContext(), collectionInfo);        playSong(song);        Intent intent = new Intent(mFragment.getActivity(), NowPlayingActivity.class);        mFragment.startActivity(intent);    }    @Override    public void onClickBackView(int position) {    }    @Override    public void onDismiss(int[] reverseSortedPositions) {    }    private void playSong(Song song) {        Uri songUri = Uri.fromFile(new File(song.getFilePath()));        Intent intent = new Intent(MusicPlayerService.ACTION_PLAY, songUri, mFragment.getActivity().getApplicationContext(), MusicPlayerService.class);        intent.putExtra(Song.KEY_SONG, song);        mFragment.getActivity().startService(intent);    }}