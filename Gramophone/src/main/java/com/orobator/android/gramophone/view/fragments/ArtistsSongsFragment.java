package com.orobator.android.gramophone.view.fragments;import android.app.Fragment;import android.app.FragmentManager;import android.app.LoaderManager;import android.content.Loader;import android.database.Cursor;import android.os.Bundle;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import com.fortysevendeg.android.swipelistview.SwipeListView;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.controller.listeners.SongSwipeViewListener;import com.orobator.android.gramophone.model.Album;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongDatabaseHelper.SongCursor;import com.orobator.android.gramophone.model.loaders.SongCursorLoader;import com.orobator.android.gramophone.view.adapters.DummyListAdapter;import com.orobator.android.gramophone.view.adapters.SongCursorAdapter;public class ArtistsSongsFragment extends Fragment implements LoaderManager.LoaderCallbacks<Cursor> {    private static final String TAG = "ArtistsSongsFragment";    private SwipeListView mSwipeListView;    private String mArtist;    @Override    public Loader<Cursor> onCreateLoader(int id, Bundle args) {        return new SongCursorLoader(getActivity(), id, args);    }    @Override    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {        SongCursor songCursor = (SongCursor) cursor;        SongCursorAdapter adapter = new SongCursorAdapter(getActivity().getApplicationContext(), songCursor, this);        mSwipeListView.setAdapter(adapter);//        mSwipeListView.setOnItemClickListener(new SongClickListener(adapter, this));        mSwipeListView.setSwipeListViewListener(new SongSwipeViewListener(adapter, this));    }    @Override    public void onLoaderReset(Loader<Cursor> loader) {        // Stop using the cursor (via the adapter)        mSwipeListView.setAdapter(new DummyListAdapter());    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRetainInstance(true);        setHasOptionsMenu(true);        Bundle args = getArguments();        mArtist = args.getString(Song.KEY_ARTIST);        getLoaderManager().initLoader(SongCursorLoader.ARTIST_SONGS_ID, args, this);    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {        menuInflater.inflate(R.menu.artist_songs, menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem menuItem) {        switch (menuItem.getItemId()) {            case R.id.view_albums:                Bundle args = new Bundle();                args.putString(Song.KEY_ARTIST, mArtist);                args.putString(Album.KEY_ALBUM_ARTIST, mArtist);                Fragment fragment = new ArtistsAlbumsFragment();                fragment.setArguments(args);                FragmentManager fm = getActivity().getFragmentManager();                fm.beginTransaction()                        .replace(R.id.content_frame, fragment)                        .addToBackStack(mArtist)                        .commit();                break;            default:        }        return true;    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.list_view_songs, parent, false);        if (view != null) {            mSwipeListView = (SwipeListView) view.findViewById(R.id.list_view_songs);        }        LinearLayout emptyView = (LinearLayout) inflater.inflate(R.layout.list_view_songs_empty, parent, false);        // TODO get this working.        mSwipeListView.setEmptyView(emptyView);        return view;    }}