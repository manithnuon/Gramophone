package com.orobator.android.gramophone.view.adapters;import android.content.Context;import android.content.res.Resources;import android.database.DataSetObserver;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.util.LruCache;import android.util.TypedValue;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.TextView;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongQueue;import java.lang.ref.WeakReference;public class SongQueueAdapter implements ListAdapter {    private static final String TAG = "SongQueueAdapter";    private static final int THUMBNAIL_WIDTH = 80;    private static final int THUMBNAIL_HEIGHT = 80;    private Context mContext;    private Bitmap albumArtPlaceHolder;    private LruCache<String, Bitmap> mMemoryCache;    public SongQueueAdapter(Context context) {        mContext = context;        // First decode with inJustDecodeBounds=true to check dimensions        final BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        BitmapFactory.decodeResource(mContext.getResources(), R.drawable.ic_launcher, options);        // Calculate inSampleSize        options.inSampleSize = 1;        options.inJustDecodeBounds = false;        albumArtPlaceHolder = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.ic_launcher, options);        // Get max available VM memory, exceeding this amount will throw an        // OutOfMemory exception. Stored in kilobytes as LruCache takes an        // int in its constructor.        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);        // Use 1/8th of the available memory for this memory cache.        final int cacheSize = maxMemory / 8;        mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {            @Override            protected int sizeOf(String key, Bitmap bitmap) {                // The cache size will be measured in kilobytes rather than                // number of items.                return bitmap.getByteCount() / 1024;            }        };    }    @Override    public boolean areAllItemsEnabled() {        return true;    }    @Override    public boolean isEnabled(int position) {        return true;    }    @Override    public void registerDataSetObserver(DataSetObserver observer) {    }    @Override    public void unregisterDataSetObserver(DataSetObserver observer) {    }    @Override    public int getCount() {        return SongQueue.getQueueSize();    }    @Override    public Object getItem(int position) {        int newPos = SongQueue.getCurrentSongPosition() + position + 1;        return SongQueue.getSong(newPos);    }    @Override    public long getItemId(int position) {        int newPos = SongQueue.getCurrentSongPosition() + position + 1;        return SongQueue.getSong(newPos).getSongID();    }    @Override    public boolean hasStableIds() {        return true;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        final Song song = (Song) getItem(position);        if (convertView == null) {            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = inflater.inflate(R.layout.list_item_queue_song, null);        }        TextView titleTextView = (TextView) convertView.findViewById(R.id.songTitle_TextView);        TextView artistTextView = (TextView) convertView.findViewById(R.id.songArtist_TextView);        TextView albumTextView = (TextView) convertView.findViewById(R.id.songAlbum_TextView);        ImageView albumArtImageView = (ImageView) convertView.findViewById(R.id.songListItemAlbumArt_imageView);        titleTextView.setText(song.getTitle());        artistTextView.setText(song.getArtist());        albumTextView.setText(song.getAlbum());        if (song.hasArtwork()) {            Bitmap albumArtBitmap = getBitmapFromMemCache(song.toString());            if (albumArtBitmap != null) {                albumArtImageView.setImageBitmap(albumArtBitmap);            } else {                if (cancelPotentialWork(song, albumArtImageView)) {                    BitmapWorkerTask task = new BitmapWorkerTask(albumArtImageView);                    AsyncDrawable asyncDrawable = new AsyncDrawable(mContext.getResources(), albumArtPlaceHolder, task);                    albumArtImageView.setImageDrawable(asyncDrawable);                    task.execute(song);                }            }        } else {            albumArtImageView.setImageDrawable(new BitmapDrawable(mContext.getResources(), albumArtPlaceHolder));        }        return convertView;    }    @Override    public int getItemViewType(int position) {        return 0;    }    @Override    public int getViewTypeCount() {        return 1;    }    @Override    public boolean isEmpty() {        return getCount() == 0;    }    public Bitmap getBitmapFromMemCache(String key) {        return mMemoryCache.get(key);    }    public boolean cancelPotentialWork(Song song, ImageView imageView) {        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);        if (bitmapWorkerTask != null) {            final Song bitmapSong = bitmapWorkerTask.mSong;            if (bitmapSong != song) {                // Cancel previous task                bitmapWorkerTask.cancel(true);            } else {                // The same work is already in progress                return false;            }        }        // No task associated with the ImageView, or an existing task was cancelled        return true;    }    BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {        if (imageView != null) {            final Drawable drawable = imageView.getDrawable();            if (drawable instanceof AsyncDrawable) {                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;                return asyncDrawable.getBitmapWorkerTask();            }        }        return null;    }    public void addBitmapToMemoryCache(String key, Bitmap bitmap) {        if (getBitmapFromMemCache(key) == null) {            mMemoryCache.put(key, bitmap);        }    }    private Bitmap decodeSampledBitmapFromSong(Song song) {        // First decode with inJustDecodeBounds=true to check dimensions        final BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        byte[] albumBytes = song.getArtworkByteArray();        BitmapFactory.decodeByteArray(albumBytes, 0, albumBytes.length, options);        // Calculate inSampleSize        options.inSampleSize = calculateInSampleSize(options, dipToPixels(THUMBNAIL_WIDTH), dipToPixels(THUMBNAIL_HEIGHT));        options.inJustDecodeBounds = false;        return BitmapFactory.decodeByteArray(albumBytes, 0, albumBytes.length, options);    }    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {        // Raw height and width of image        final int height = options.outHeight;        final int width = options.outWidth;        int inSampleSize = 1;        if (reqHeight == 0 || reqWidth == 0) return inSampleSize;        if (height > reqHeight || width > reqWidth) {            // Calculate ratios of height and width to requested height and width            final int heightRatio = Math.round((float) height / (float) reqHeight);            final int widthRatio = Math.round((float) width / (float) reqWidth);            // Choose the smallest ratio as inSampleSize value. This will guarantee            // a final image with both dimensions larger than or equal to the            // requested height and width            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;        }        return inSampleSize;    }    private int dipToPixels(int dip) {        Resources r = mContext.getResources();        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, (float) dip, r.getDisplayMetrics());    }    static class AsyncDrawable extends BitmapDrawable {        private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;        public AsyncDrawable(Resources res, Bitmap bitmap,                             BitmapWorkerTask bitmapWorkerTask) {            super(res, bitmap);            bitmapWorkerTaskReference =                    new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);        }        public BitmapWorkerTask getBitmapWorkerTask() {            return bitmapWorkerTaskReference.get();        }    }    class BitmapWorkerTask extends AsyncTask<Song, Void, Bitmap> {        // Stored as a weak reference so framework can garbage collect ImageView        // when needed        private final WeakReference<ImageView> mImageViewReference;        private Song mSong;        public BitmapWorkerTask(ImageView imageView) {            mImageViewReference = new WeakReference<>(imageView);        }        // Decode image in background        @Override        protected Bitmap doInBackground(Song... params) {            mSong = params[0];            ImageView thumbnail = mImageViewReference.get();            Bitmap bitmap = decodeSampledBitmapFromSong(mSong);            addBitmapToMemoryCache(mSong.toString(), bitmap);            return bitmap;        }        // Once complete, see if ImageView is still around and set Bitmap        @Override        protected void onPostExecute(Bitmap bitmap) {            if (isCancelled()) {                bitmap = null;            }            if (mImageViewReference != null && bitmap != null) {                final ImageView imageView = mImageViewReference.get();                final BitmapWorkerTask bitmapWorkerTask =                        getBitmapWorkerTask(imageView);                if (this == bitmapWorkerTask && imageView != null) {                    imageView.setImageBitmap(bitmap);                }            }        }    }}